#
# earthquake source function
#

"""This function returns a callable object representing an initial water
   displacement generated by an undersea earthquake.

Using input parameters:

Required
 length  downslope slide length
 depth   water depth to slide centre of mass
 slope   bathymetric slope

Optional
 x0      x origin (0)
 y0      y origin (0)
 w       slide width (0.25*length)
 g       acceleration due to gravity (9.8)

The returned object is a callable function that represents
the initial water displacement generated by an undersea earthquake.

Geoscience Australia, February 2007
"""

def earthquake_tsunami(length, depth, slope, width=None, thickness=None, \
                       x0=0.0, y0=0.0, alpha=0.0, \
                       gravity=9.8, gamma=1.85, \
                       massco=1, dragco=1, frictionco=0, psi=0, \
                       dx=None, kappa=3.0, kappad=0.8, zsmall=0.01, \
                       domain=None, verbose=False):

    from math import sin, tan, radians, pi, sqrt, exp

    if domain is not None:
        xllcorner = domain.geo_reference.get_xllcorner()
        yllcorner = domain.geo_reference.get_yllcorner()
        x0 = x0 - xllcorner  # slump origin (relative)
        y0 = y0 - yllcorner
        
    #if width not provided, set to typical value
    if width is None:
        width = 0.25 * length

    #if thickness not provided, set to typical value
    if thickness is None:
        thickness = 0.01 * length

    #calculate some parameters of the earthquake

    #calculate some parameters of the water displacement produced by the earthquake
        
    #a few temporary print statements
    if verbose is True:
        print '\nThe earthquake ...'
        print '\tLength: ', length
        print '\tDepth: ', depth
        print '\tSlope: ', slope
        print '\tWidth: ', width
        print '\tThickness: ', thickness
        print '\tx0: ', x0
        print '\ty0: ', y0
        print '\tAlpha: ', alpha
        print '\tAcceleration: ', a0
        print '\tTerminal velocity: ', ut
        print '\tChar time: ', t0
        print '\tChar distance: ', s0
        print '\nThe tsunami ...'
        print '\tWavelength: ', w
        print '\t2D amplitude: ', a2D
        print '\t3D amplitude: ', a3D

    return Water_displacement(a3D=a3D, wavelength=w, width=width, \
                              x0=x0, y0=y0, alpha=alpha, \
                              dx=dx, kappa=kappa, kappad=kappad, zsmall=zsmall)


#
# Water_displacement class
#

"""This is a callable class representing the initial water displacment 
   generated by an undersea earthquake.

Using input parameters:

Required
 w       initial wavelength of tsunami
 a3D     3D initial amplitude of tsunami
 width   width of smf
 x0      x origin of earthquake
 y0      y origin of earthquake

Geoscience Australia, February 2007
"""

class Water_displacement:

    def __init__(self, a3D, wavelength, width, x0, y0, alpha, \
                 dx, kappa, kappad, zsmall):
        self.a3D = a3D
        self.wavelength = wavelength
        self.width = width
        self.x0 = x0
        self.y0 = y0
        self.alpha = alpha
        self.kappa = kappa
        self.kappad = kappad


    def __call__(self, x, y):
        """Make Water_displacement a callable object.

        If called as a function, this object returns z values representing
        the initial 3D distribution of water heights at the points (x,y)
        produced by an undersea earthquake.
        """

        from math import sin, cos, radians, exp, cosh
        from Numeric import zeros, Float
        from earthquake import initial_condition
        
        #ensure vectors x and y have the same length
        N = len(x)
        assert N == len(y)

        am = self.a3D
        am2 = 1.0
        wa = self.wavelength
        wi = self.width
        x0 = self.x0
        y0 = self.y0
        alpha = self.alpha
        dx = self.dx
        kappa = self.kappa
        kappad = self.kappad
        amin = 1.0

        #Water displacement calculation assumes water displacement is oriented
        #E-W, so, for displacement at some angle alpha clockwise from the E-W
        #direction, rotate (x,y) coordinates anti-clockwise by alpha

        cosa = cos(radians(alpha))
        sina = sin(radians(alpha))

        xr = ((x-x0) * cosa - (y-y0) * sina) + x0
        yr = ((x-x0) * sina + (y-y0) * cosa) + y0

        z = zeros(N, Float)

        z = initial_condition(x,y,x0,y0,alpha,gamma)

##        for i in range(N):
##            try:
##                z[i] =  -(am/am2) / (amin*(cosh(kappa*(yr[i]-y0)/(wi+wa)))**2) \
##                            * (exp(-((xr[i]-x0)/wa)**2) - \
##                                kappad*exp(-((xr[i]-dx-x0)/wa)**2))
##                if z[i] > maxz: maxz = z[i]
##                if z[i] < minz: minz = z[i]
##                
##            except OverflowError:
##                pass

                
        return z
